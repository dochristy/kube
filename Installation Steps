Install Virtualbox from virtualbox.org
Install cygwin
Install Vagrant
mkdir ubuntu
cd ubuntu
vagrant init ubuntu/xenial
vagrant up
vagrant ssh
sudo apt-get update
sudo apt-get docker.io
cd ..
mkdir kops
cd kops
wget https://github.com/kubernetes/kops/releases/download/1.5.1/kops-linux-amd64
wget https://storage.googleapis.com/kubernetes-release/release/v1.5.3/bin/linux/amd64/kubectl
mv kops-linux-amd64 kops
chmod +x kops kubectl
mv kops kubectl /usr/local/bin
sudo apt-get install python-pip
sudo pip install awscli
AKIAI6G3UYUNUMX7RZIQ
P67oO/zpV5jQ13DxgIYKluid6ZzLag1GGj8T+1
aws configure
ssh-keygen -f .ssh/id_rsa
kops create cluster --name=kubernetes.myc110.bid --state=s3://kops-chris-c110 --zones=us-east-1a --node-count=3 --node-size=t2.medium --master-size=t2.medium --dns-zone=kubernetes.myc110.bid

FROM java:jre

MAINTAINER Chris D

ENV PDI_RELEASE=7.0 \
    PDI_VERSION=7.0.0.0-25 \
    PDI_HOME=/opt/pentaho-di \
    KETTLE_HOME=/pentaho-di

COPY pdi-ce-7.0.0.0-25.zip /tmp

RUN unzip -q //tmp/pdi-ce-${PDI_VERSION}.zip -d $PDI_HOME && \
    rm //tmp/pdi-ce-${PDI_VERSION}.zip

ENV PATH=$PDI_HOME/data-integration:$PATH

EXPOSE 8080

RUN mkdir -p $KETTLE_HOME/.kettle /docker-entrypoint.d /templates /pentaho-di/xbi_repo /pentaho-di/carte

COPY repositories.xml $KETTLE_HOME/.kettle

COPY carte-config-master-9090.xml /pentaho-di/carte

COPY carte-config-slave-8080.xml /pentaho-di/carte

COPY carte-config-slave-8282.xml /pentaho-di/carte

COPY test_1.ktr /pentaho-di/xbi_repo

COPY mytest.kjb /pentaho-di/xbi_repo

CMD ["/bin/sh", "/pentaho-di/carte/carte-start.sh"]

$ cd "C:\Program Files\Oracle\VirtualBox"
$ vagrant global-status


id       name    provider   state   directory
------------------------------------------------------------------------
d1d92b3  default virtualbox running C:/temp
ce2e695  default virtualbox running C:/cygwin64/home/cdorai200/ubuntu
66aeec6  default virtualbox running C:/cygwin64/home/cdorai200

$ vagrant plugin install vagrant-scp
$ vagrant scp test.txt ce2e695:/home/ubuntu/pentaho


apiVersion: "v1"
kind: Pod
metadata:
  name: carte-all-1
  labels:
    name: carte-all-1
    app: demo
spec:
  containers:
    - name: carte-master
      image: tobilg/pentaho-di
      ports:
        - containerPort: 8080
          name: carte-master
          protocol: TCP
    - name: carte-worker-1
      image: tobilg/pentaho-di
      ports:
        - containerPort: 8282
          name: carte-worker-1
          protocol: TCP

		  
		  
		  


apiVersion: v1
kind: Service
metadata:
  name: carte-all
spec:
  selector:
    app: demo
  ports:
  - port: 8080
    name: carte-master
    targetPort: 8080
  - port: 8282
    name: carte-worker-1
    targetPort: 8282
  type: LoadBalancer


